using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using OmniSharp.Extensions.JsonRpc.Generators.Cache;
using static Microsoft.CodeAnalysis.CSharp.SyntaxFactory;

namespace OmniSharp.Extensions.JsonRpc.Generators
{
    [Generator]
    public class EnumLikeStringGenerator : CachedSourceGenerator<EnumLikeStringGenerator.SyntaxReceiver, StructDeclarationSyntax>
    {
        protected override void Execute(
            GeneratorExecutionContext context, SyntaxReceiver syntaxReceiver, AddCacheSource<StructDeclarationSyntax> addCacheSource,
            ReportCacheDiagnostic<StructDeclarationSyntax> cacheDiagnostic
        )
        {
            foreach (var candidate in syntaxReceiver.Candidates)
            {
                var model = context.Compilation.GetSemanticModel(candidate.SyntaxTree);
                var symbol = model.GetDeclaredSymbol(candidate);
                if (symbol is null) continue;

                if (!candidate.Modifiers.Any(z => z.IsKind(SyntaxKind.PartialKeyword)))
                {
                    cacheDiagnostic(candidate, static c => Diagnostic.Create(GeneratorDiagnostics.MustBePartial, c.Identifier.GetLocation(), c.Identifier.Text));
                    continue;
                }

                if (!candidate.Modifiers.Any(z => z.IsKind(SyntaxKind.ReadOnlyKeyword)))
                {
                    cacheDiagnostic(candidate, static c => Diagnostic.Create(GeneratorDiagnostics.MustBeReadOnly, c.Identifier.GetLocation(), c.Identifier.Text));
                    continue;
                }

                var cu = CompilationUnit(
                             List<ExternAliasDirectiveSyntax>(),
                             List<UsingDirectiveSyntax>(),
                             List<AttributeListSyntax>(),
                             SingletonList<MemberDeclarationSyntax>(
                                 NamespaceDeclaration(ParseName(symbol.ContainingNamespace.ToDisplayString()))
                                    .WithMembers(SingletonList<MemberDeclarationSyntax>(GetImplementation(candidate)))
                             )
                         )
                        .AddUsings(
                             UsingDirective(ParseName("System")),
                             UsingDirective(ParseName("System.Collections.Generic")),
                             UsingDirective(ParseName("System.Diagnostics")),
                             UsingDirective(ParseName("System.Linq")),
                             UsingDirective(ParseName("System.Reflection")),
                             UsingDirective(ParseName("Newtonsoft.Json")),
                             UsingDirective(ParseName("OmniSharp.Extensions.JsonRpc")),
                             UsingDirective(ParseName("OmniSharp.Extensions.JsonRpc.Serialization.Converters"))
                         )
                        .WithLeadingTrivia()
                        .WithTrailingTrivia()
                        .WithLeadingTrivia(Comment(Preamble.GeneratedByATool), Trivia(NullableDirectiveTrivia(Token(SyntaxKind.EnableKeyword), true)))
                        .WithTrailingTrivia(Trivia(NullableDirectiveTrivia(Token(SyntaxKind.RestoreKeyword), true)), CarriageReturnLineFeed);

                addCacheSource(
                    $"{Path.GetFileNameWithoutExtension(candidate.SyntaxTree.FilePath)}_{candidate.Identifier.Text}{( candidate.Arity > 0 ? candidate.Arity.ToString() : "" )}.cs",
                    candidate,
                    cu.NormalizeWhitespace().GetText(Encoding.UTF8)
                );
            }
        }

        private static StructDeclarationSyntax GetImplementation(StructDeclarationSyntax syntax)
        {
            return syntax
                  .WithBaseList(
                       BaseList(
                           SeparatedList(
                               new BaseTypeSyntax[] {
                                   SimpleBaseType(
                                       GenericName(Identifier("IEquatable"))
                                          .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(PredefinedType(Token(SyntaxKind.StringKeyword)))))
                                   ),
                                   SimpleBaseType(
                                       GenericName(Identifier("IEquatable"))
                                          .WithTypeArgumentList(TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(syntax.Identifier.Text))))
                                   ),
                                   SimpleBaseType(IdentifierName("IEnumLikeString"))
                               }
                           )
                       )
                   )
                  .WithAttributeLists(
                       List(
                           new[] {
                               AttributeList(
                                   SingletonSeparatedList(
                                       Attribute(IdentifierName("JsonConverter"))
                                          .WithArgumentList(
                                               AttributeArgumentList(
                                                   SingletonSeparatedList(
                                                       AttributeArgument(
                                                           TypeOfExpression(
                                                               IdentifierName("EnumLikeStringConverter")
                                                           )
                                                       )
                                                   )
                                               )
                                           )
                                   )
                               ),
                               AttributeList(
                                   SingletonSeparatedList(
                                       Attribute(IdentifierName("DebuggerDisplay"))
                                          .WithArgumentList(
                                               AttributeArgumentList(
                                                   SingletonSeparatedList(
                                                       AttributeArgument(LiteralExpression(SyntaxKind.StringLiteralExpression, Literal("{_value}")))
                                                   )
                                               )
                                           )
                                   )
                               )
                           }
                       )
                   )
                  .WithMembers(
                       List(
                           new MemberDeclarationSyntax[] {
                               FieldDeclaration(
                                       VariableDeclaration(
                                               GenericName(Identifier("Lazy"))
                                                  .WithTypeArgumentList(
                                                       TypeArgumentList(
                                                           SingletonSeparatedList<TypeSyntax>(
                                                               GenericName(Identifier("IReadOnlyList"))
                                                                  .WithTypeArgumentList(
                                                                       TypeArgumentList(SingletonSeparatedList<TypeSyntax>(IdentifierName(syntax.Identifier.Text)))
                                                                   )
                                                           )
                                                       )
                                                   )
                                           )
                                          .WithVariables(
                                               SingletonSeparatedList(
                                                   VariableDeclarator(Identifier("_defaults"))
                                                      .WithInitializer(
                                                           EqualsValueClause(
                                                               ObjectCreationExpression(
                                                                       GenericName(Identifier("Lazy"))
                                                                          .WithTypeArgumentList(
                                                                               TypeArgumentList(
                                                                                   SingletonSeparatedList<TypeSyntax>(
                                                                                       GenericName(Identifier("IReadOnlyList"))
                                                                                          .WithTypeArgumentList(
                                                                                               TypeArgumentList(
                                                                                                   SingletonSeparatedList<TypeSyntax>(IdentifierName(syntax.Identifier.Text))
                                                                                               )
                                                                                           )
                                                                                   )
                                                                               )
                                                                           )
                                                                   )
                                                                  .WithArgumentList(
                                                                       ArgumentList(
                                                                           SingletonSeparatedList(
                                                                               Argument(
                                                                                   ParenthesizedLambdaExpression()
                                                                                      .WithBlock(
                                                                                           Block(
                                                                                               SingletonList<StatementSyntax>(
                                                                                                   ReturnStatement(
                                                                                                       InvocationExpression(
                                                                                                           MemberAccessExpression(
                                                                                                               SyntaxKind.SimpleMemberAccessExpression,
                                                                                                               InvocationExpression(
                                                                                                                   MemberAccessExpression(
                                                                                                                       SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                       InvocationExpression(
                                                                                                                               MemberAccessExpression(
                                                                                                                                   SyntaxKind.SimpleMemberAccessExpression,
                                                                                                                                   InvocationExpression(
                                                                                                                                           MemberAccessExpression(
                                                                                                                                               SyntaxKind
                                                                                                                                                  .SimpleMemberAccessExpression,
                                                                                                                                               InvocationExpression(
                                                                                                                                                       MemberAccessExpression(
                                                                                                                                                           SyntaxKind
                                                                                                                                                              .SimpleMemberAccessExpression,
                                                                                                                                                           TypeOfExpression(
                                                                                                                                                               IdentifierName(
                                                                                                                                                                   syntax.Identifier
                                                                                                                                                                      .Text
                                                                                                                                                               )
                                                                                                                                                           ),
                                                                                                                                                           IdentifierName(
                                                                                                                                                               "GetProperties"
                                                                                                                                                           )
                                                                                                                                                       )
                                                                                                                                                   )
                                                                                                                                                  .WithArgumentList(
                                                                                                                                                       ArgumentList(
                                                                                                                                                           SingletonSeparatedList(
                                                                                                                                                               Argument(
                                                                                                                                                                   BinaryExpression(
                                                                                                                                                                       SyntaxKind
                                                                                                                                                                          .BitwiseOrExpression,
                                                                                                                                                                       MemberAccessExpression(
                                                                                                                                                                           SyntaxKind
                                                                                                                                                                              .SimpleMemberAccessExpression,
                                                                                                                                                                           IdentifierName(
                                                                                                                                                                               "BindingFlags"
                                                                                                                                                                           ),
                                                                                                                                                                           IdentifierName(
                                                                                                                                                                               "Static"
                                                                                                                                                                           )
                                                                                                                                                                       ),
                                                                                                                                                                       MemberAccessExpression(
                                                                                                                                                                           SyntaxKind
                                                                                                                                                                              .SimpleMemberAccessExpression,
                                                                                                                                                                           IdentifierName(
                                                                                                                                                                               "BindingFlags"
                                                                                                                                                                           ),
                                                                                                                                                                           IdentifierName(
                                                                                                                                                                               "Public"
                                                                                                                                                                           )
                                                                                                                                                                       )
                                                                                                                                                                   )
                                                                                                                                                               )
                                                                                                                                                           )
                                                                                                                                                       )
                                                                                                                                                   ),
                                                                                                                                               IdentifierName("Where")
                                                                                                                                           )
                                                                                                                                       )
                                                                                                                                      .WithArgumentList(
                                                                                                                                           ArgumentList(
                                                                                                                                               SingletonSeparatedList(
                                                                                                                                                   Argument(
                                                                                                                                                       SimpleLambdaExpression(
                                                                                                                                                               Parameter(
                                                                                                                                                                   Identifier("z")
                                                                                                                                                               )
                                                                                                                                                           )
                                                                                                                                                          .WithExpressionBody(
                                                                                                                                                               BinaryExpression(
                                                                                                                                                                   SyntaxKind
                                                                                                                                                                      .NotEqualsExpression,
                                                                                                                                                                   MemberAccessExpression(
                                                                                                                                                                       SyntaxKind
                                                                                                                                                                          .SimpleMemberAccessExpression,
                                                                                                                                                                       IdentifierName(
                                                                                                                                                                           "z"
                                                                                                                                                                       ),
                                                                                                                                                                       IdentifierName(
                                                                                                                                                                           "Name"
                                                                                                                                                                       )
                                                                                                                                                                   ),
                                                                                                                                                                   InvocationExpression(
                                                                                                                                                                           IdentifierName(
                                                                                                                                                                               "nameof"
                                                                                                                                                                           )
                                                                                                                                                                       )
                                                                                                                                                                      .WithArgumentList(
                                                                                                                                                                           ArgumentList(
                                                                                                                                                                               SingletonSeparatedList(
                                                                                                                                                                                   Argument(
                                                                                                                                                                                       IdentifierName(
                                                                                                                                                                                           "Defaults"
                                                                                                                                                                                       )
                                                                                                                                                                                   )
                                                                                                                                                                               )
                                                                                                                                                                           )
                                                                                                                                                                       )
                                                                                                                                                               )
                                                                                                                                                           )
                                                                                                                                                   )
                                                                                                                                               )
                                                                                                                                           )
                                                                                                                                       ),
                                                                                                                                   IdentifierName("Select")
                                                                                                                               )
                                                                                                                           )
                                                                                                                          .WithArgumentList(
                                                                                                                               ArgumentList(
                                                                                                                                   SingletonSeparatedList(
                                                                                                                                       Argument(
                                                                                                                                           SimpleLambdaExpression(
                                                                                                                                                   Parameter(
                                                                                                                                                       Identifier("z")
                                                                                                                                                   )
                                                                                                                                               )
                                                                                                                                              .WithExpressionBody(
                                                                                                                                                   InvocationExpression(
                                                                                                                                                           MemberAccessExpression(
                                                                                                                                                               SyntaxKind
                                                                                                                                                                  .SimpleMemberAccessExpression,
                                                                                                                                                               IdentifierName("z"),
                                                                                                                                                               IdentifierName(
                                                                                                                                                                   "GetValue"
                                                                                                                                                               )
                                                                                                                                                           )
                                                                                                                                                       )
                                                                                                                                                      .WithArgumentList(
                                                                                                                                                           ArgumentList(
                                                                                                                                                               SingletonSeparatedList(
                                                                                                                                                                       Argument(
                                                                                                                                                                           LiteralExpression(
                                                                                                                                                                               SyntaxKind
                                                                                                                                                                                  .NullLiteralExpression
                                                                                                                                                                           )
                                                                                                                                                                       )
                                                                                                                                                                   )
                                                                                                                                                           )
                                                                                                                                                       )
                                                                                                                                               )
                                                                                                                                       )
                                                                                                                                   )
                                                                                                                               )
                                                                                                                           ),
                                                                                                                       GenericName(
                                                                                                                               Identifier("Cast")
                                                                                                                           )
                                                                                                                          .WithTypeArgumentList(
                                                                                                                               TypeArgumentList(
                                                                                                                                   SingletonSeparatedList<TypeSyntax>(
                                                                                                                                       IdentifierName(syntax.Identifier.Text)
                                                                                                                                   )
                                                                                                                               )
                                                                                                                           )
                                                                                                                   )
                                                                                                               ),
                                                                                                               IdentifierName("ToArray")
                                                                                                           )
                                                                                                       )
                                                                                                   )
                                                                                               )
                                                                                           )
                                                                                       )
                                                                               )
                                                                           )
                                                                       )
                                                                   )
                                                           )
                                                       )
                                               )
                                           )
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PrivateKeyword),
                                               Token(SyntaxKind.StaticKeyword),
                                               Token(SyntaxKind.ReadOnlyKeyword)
                                           }
                                       )
                                   ),
                               PropertyDeclaration(
                                       GenericName(
                                               Identifier("IEnumerable")
                                           )
                                          .WithTypeArgumentList(
                                               TypeArgumentList(
                                                   SingletonSeparatedList<TypeSyntax>(
                                                       IdentifierName(syntax.Identifier.Text)
                                                   )
                                               )
                                           ),
                                       Identifier("Defaults")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.StaticKeyword)
                                           }
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           MemberAccessExpression(
                                               SyntaxKind.SimpleMemberAccessExpression,
                                               IdentifierName("_defaults"),
                                               IdentifierName("Value")
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               FieldDeclaration(
                                       VariableDeclaration(
                                               PredefinedType(
                                                   Token(SyntaxKind.StringKeyword)
                                               )
                                           )
                                          .WithVariables(
                                               SingletonSeparatedList(
                                                   VariableDeclarator(
                                                       Identifier("_value")
                                                   )
                                               )
                                           )
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PrivateKeyword),
                                               Token(SyntaxKind.ReadOnlyKeyword)
                                           }
                                       )
                                   ),
                               ConstructorDeclaration(
                                       Identifier(syntax.Identifier.Text)
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           Token(SyntaxKind.PublicKeyword)
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("type")
                                                   )
                                                  .WithType(
                                                       PredefinedType(
                                                           Token(SyntaxKind.StringKeyword)
                                                       )
                                                   )
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           AssignmentExpression(
                                               SyntaxKind.SimpleAssignmentExpression,
                                               IdentifierName("_value"),
                                               IdentifierName("type")
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               ConversionOperatorDeclaration(
                                       Token(SyntaxKind.ImplicitKeyword),
                                       IdentifierName(syntax.Identifier.Text)
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.StaticKeyword)
                                           }
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("kind")
                                                   )
                                                  .WithType(
                                                       PredefinedType(
                                                           Token(SyntaxKind.StringKeyword)
                                                       )
                                                   )
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           ObjectCreationExpression(
                                                   IdentifierName(syntax.Identifier.Text)
                                               )
                                              .WithArgumentList(
                                                   ArgumentList(
                                                       SingletonSeparatedList(
                                                           Argument(
                                                               IdentifierName("kind")
                                                           )
                                                       )
                                                   )
                                               )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               ConversionOperatorDeclaration(
                                       Token(SyntaxKind.ImplicitKeyword),
                                       PredefinedType(
                                           Token(SyntaxKind.StringKeyword)
                                       )
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.StaticKeyword)
                                           }
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("kind")
                                                   )
                                                  .WithType(
                                                       IdentifierName(syntax.Identifier.Text)
                                                   )
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           MemberAccessExpression(
                                               SyntaxKind.SimpleMemberAccessExpression,
                                               IdentifierName("kind"),
                                               IdentifierName("_value")
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               MethodDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.StringKeyword)
                                       ),
                                       Identifier("ToString")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.OverrideKeyword)
                                           }
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           IdentifierName("_value")
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               MethodDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.BoolKeyword)
                                       ),
                                       Identifier("Equals")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           Token(SyntaxKind.PublicKeyword)
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("other")
                                                   )
                                                  .WithType(
                                                       IdentifierName(syntax.Identifier.Text)
                                                   )
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           BinaryExpression(
                                               SyntaxKind.EqualsExpression,
                                               IdentifierName("_value"),
                                               MemberAccessExpression(
                                                   SyntaxKind.SimpleMemberAccessExpression,
                                                   IdentifierName("other"),
                                                   IdentifierName("_value")
                                               )
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               MethodDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.BoolKeyword)
                                       ),
                                       Identifier("Equals")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           Token(SyntaxKind.PublicKeyword)
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("other")
                                                   )
                                                  .WithType(
                                                       PredefinedType(
                                                           Token(SyntaxKind.StringKeyword)
                                                       )
                                                   )
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           BinaryExpression(
                                               SyntaxKind.EqualsExpression,
                                               IdentifierName("_value"),
                                               IdentifierName("other")
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               MethodDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.BoolKeyword)
                                       ),
                                       Identifier("Equals")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.OverrideKeyword)
                                           }
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SingletonSeparatedList(
                                               Parameter(
                                                       Identifier("obj")
                                                   )
                                                  .WithType(
                                                       PredefinedType(
                                                           Token(SyntaxKind.ObjectKeyword)
                                                       )
                                                   )
                                           )
                                       )
                                   ).WithExpressionBody(
                                       ArrowExpressionClause(
                                           BinaryExpression(
                                               SyntaxKind.LogicalOrExpression,
                                               BinaryExpression(
                                                   SyntaxKind.LogicalAndExpression,
                                                   IsPatternExpression(
                                                       IdentifierName("obj"),
                                                       DeclarationPattern(
                                                           PredefinedType(
                                                               Token(SyntaxKind.StringKeyword)
                                                           ),
                                                           SingleVariableDesignation(
                                                               Identifier("s")
                                                           )
                                                       )
                                                   ),
                                                   InvocationExpression(
                                                           IdentifierName("Equals")
                                                       )
                                                      .WithArgumentList(
                                                           ArgumentList(
                                                               SingletonSeparatedList(
                                                                   Argument(
                                                                       IdentifierName("s")
                                                                   )
                                                               )
                                                           )
                                                       )
                                               ),
                                               BinaryExpression(
                                                   SyntaxKind.LogicalAndExpression,
                                                   IsPatternExpression(
                                                       IdentifierName("obj"),
                                                       DeclarationPattern(
                                                           IdentifierName(syntax.Identifier.Text),
                                                           SingleVariableDesignation(
                                                               Identifier("other")
                                                           )
                                                       )
                                                   ),
                                                   InvocationExpression(
                                                           IdentifierName("Equals")
                                                       )
                                                      .WithArgumentList(
                                                           ArgumentList(
                                                               SingletonSeparatedList(
                                                                   Argument(
                                                                       IdentifierName("other")
                                                                   )
                                                               )
                                                           )
                                                       )
                                               )
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               MethodDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.IntKeyword)
                                       ),
                                       Identifier("GetHashCode")
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.OverrideKeyword)
                                           }
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           InvocationExpression(
                                               MemberAccessExpression(
                                                   SyntaxKind.SimpleMemberAccessExpression,
                                                   IdentifierName("_value"),
                                                   IdentifierName("GetHashCode")
                                               )
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               OperatorDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.BoolKeyword)
                                       ),
                                       Token(SyntaxKind.EqualsEqualsToken)
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.StaticKeyword)
                                           }
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SeparatedList<ParameterSyntax>(
                                               new SyntaxNodeOrToken[] {
                                                   Parameter(
                                                           Identifier("left")
                                                       )
                                                      .WithType(
                                                           IdentifierName(syntax.Identifier.Text)
                                                       ),
                                                   Token(SyntaxKind.CommaToken),
                                                   Parameter(
                                                           Identifier("right")
                                                       )
                                                      .WithType(
                                                           IdentifierName(syntax.Identifier.Text)
                                                       )
                                               }
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           InvocationExpression(
                                                   MemberAccessExpression(
                                                       SyntaxKind.SimpleMemberAccessExpression,
                                                       IdentifierName("left"),
                                                       IdentifierName("Equals")
                                                   )
                                               )
                                              .WithArgumentList(
                                                   ArgumentList(
                                                       SingletonSeparatedList(
                                                           Argument(
                                                               IdentifierName("right")
                                                           )
                                                       )
                                                   )
                                               )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   ),
                               OperatorDeclaration(
                                       PredefinedType(
                                           Token(SyntaxKind.BoolKeyword)
                                       ),
                                       Token(SyntaxKind.ExclamationEqualsToken)
                                   )
                                  .WithModifiers(
                                       TokenList(
                                           new[] {
                                               Token(SyntaxKind.PublicKeyword),
                                               Token(SyntaxKind.StaticKeyword)
                                           }
                                       )
                                   )
                                  .WithParameterList(
                                       ParameterList(
                                           SeparatedList<ParameterSyntax>(
                                               new SyntaxNodeOrToken[] {
                                                   Parameter(
                                                           Identifier("left")
                                                       )
                                                      .WithType(
                                                           IdentifierName(syntax.Identifier.Text)
                                                       ),
                                                   Token(SyntaxKind.CommaToken),
                                                   Parameter(
                                                           Identifier("right")
                                                       )
                                                      .WithType(
                                                           IdentifierName(syntax.Identifier.Text)
                                                       )
                                               }
                                           )
                                       )
                                   )
                                  .WithExpressionBody(
                                       ArrowExpressionClause(
                                           PrefixUnaryExpression(
                                               SyntaxKind.LogicalNotExpression,
                                               InvocationExpression(
                                                       MemberAccessExpression(
                                                           SyntaxKind.SimpleMemberAccessExpression,
                                                           IdentifierName("left"),
                                                           IdentifierName("Equals")
                                                       )
                                                   )
                                                  .WithArgumentList(
                                                       ArgumentList(
                                                           SingletonSeparatedList(
                                                               Argument(
                                                                   IdentifierName("right")
                                                               )
                                                           )
                                                       )
                                                   )
                                           )
                                       )
                                   )
                                  .WithSemicolonToken(
                                       Token(SyntaxKind.SemicolonToken)
                                   )
                           }
                       )
                   )
                ;
        }

        public EnumLikeStringGenerator() : base(() => new SyntaxReceiver(Cache))
        {
        }

        public static CacheContainer<StructDeclarationSyntax> Cache = new();

        public class SyntaxReceiver : SyntaxReceiverCache<StructDeclarationSyntax>
        {
            public List<StructDeclarationSyntax> Candidates { get; } = new();

            public SyntaxReceiver(CacheContainer<StructDeclarationSyntax> cacheContainer) : base(cacheContainer)
            {
            }

            public override string? GetKey(StructDeclarationSyntax syntax)
            {
                var hasher = new CacheKeyHasher();
                hasher.Append(syntax.SyntaxTree.FilePath);
                hasher.Append(syntax.Keyword.Text);
                hasher.Append(syntax.Identifier.Text);
                hasher.Append(syntax.TypeParameterList);
                hasher.Append(syntax.AttributeLists);
                hasher.Append(syntax.BaseList);

                return hasher;
            }

            /// <summary>
            /// Called for every syntax node in the compilation, we can inspect the nodes and save any information useful for generation
            /// </summary>
            public override void OnVisitNode(StructDeclarationSyntax syntaxNode)
            {
                // any field with at least one attribute is a candidate for property generation
                if (syntaxNode.AttributeLists.ContainsAttribute("StringEnum"))
                {
                    Candidates.Add(syntaxNode);
                }
            }
        }
    }
}
