@{	
	IReadOnlyList<IDocument> children = Model.GetDocumentList(Keys.Children);
	if(children != null && children.Count > 0)
	{
		IList<IGrouping<string, IDocument>> categoryGroups = 
			children
				.GroupBy(x => x.GetString(SamsonKeys.Category))
				.OrderBy(x => x.Key)
				.ToList();
	
		foreach(IGrouping<string, IDocument> categoryGroup in categoryGroups)
		{
			<div class="box">
				<div class="box-body no-padding">
					<table class="table table-striped table-hover two-cols-alt table-responsive">
						@if(!string.IsNullOrWhiteSpace(categoryGroup.Key))
						{
							<thead>
								<tr class="active"><th colspan="2">@categoryGroup.Key</th></tr>
							</thead>
						}
						
						<tbody>
							@foreach(IDocument child in categoryGroup
								.OrderBy(x => x.Get<int>(SamsonKeys.Order, 1000))
								.ThenBy(x => x.WithoutSettings().GetString(Keys.Title)))
							{
								object[] childTreePath = child.Get<object[]>(Keys.TreePath);
								<tr>
									<td><strong><a href="@Context.GetLink(child)">@(child.WithoutSettings().GetString(Keys.Title, childTreePath.Last().ToString()))</a></strong></td>
									<td>
										@{
											if(child.ContainsKey(SamsonKeys.Description))
											{
												<text>@(child.GetString(SamsonKeys.Description))</text>
											}					
										}
									</td>
								</tr>
							}
						</tbody>				
					</table>
				</div>
			</div> 
		}
	}
}